@using System.Globalization
@using Blazor.DownloadFileFast.Interfaces
@using XtremeModels
@inject WebApiService Api
@inject IJSRuntime Js
<style>
    tfoot tr {
        background-color: var(--mud-palette-surface);
    }

        tfoot tr td {
            border-top: 1px solid var(--mud-palette-table-lines);
            background-color: var(--mud-palette-surface);
            position: sticky;
            bottom: 0;
        }
</style>
<MudDialog Style="max-height:500px;overflow-y: scroll;">

    <DialogContent>
        <MudText Style="align-self:center;" Align="Align.Center"><MudIcon Icon="@Icons.Material.Filled.Lock" Color="@(Printable?Color.Error:Color.Transparent)" Size="Size.Small"></MudIcon> Inv#: <span style="color:red;margin-right:10px;">@InvNo</span>A/c: <span style="color:darkcyan;margin-right:10px;">@Code</span>Ref: <span style="color:forestgreen">@Ref</span></MudText>

        @if (AllItems is not null && AllItems?.Any() == true)
        {
            snoCountStart = 1;

            <MudSimpleTable Dense="true" Bordered="true"  Hover="true" FixedHeader="true" Style="margin-top:3px;margin-bottom:3px;max-height:250px;overflow-y: scroll;">
                <thead>
                    <tr>
                        <th style="background-color: #ffe4b5;color:black;"><b>S #</b></th>
                        @if (pr)
                        {
                            <th style="background-color: #ffe4b5;color:black;text-align:right;"><b>PR</b></th>

                        }
                        <th style="background-color: #ffe4b5;color:black"><b>Digit</b></th>
                        @if (AddRate)
                        {
                            <th style="background-color: #ffe4b5;color:black;text-align:right;"><b>Rate</b></th>

                        }
                        <th style="text-align:center;background-color: #ffe4b5;color:black"><b>1<sup>st</sup></b></th>
                        <th style="text-align:center;background-color: #ffe4b5;color:black"><b>2<sup>nd</sup></b></th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var transaction in AllItems)
                    {
                        transaction.sNo = snoCountStart.ToString("D4");

                        <tr>
                            <td><b>@transaction.sNo</b></td>
                            @if (pr)
                            {
                                <td style="text-align:right"><b>@transaction.PktPerc.ToString("C2",numberFormat)</b></td>

                            }
                            <td><b>@transaction.Digit</b></td>
                            @if (AddRate)
                            {
                                <td style="text-align:right"><b>@transaction.sc_rate.ToString("C2",numberFormat)</b></td>

                            }
                            <td style="text-align:right"><b>@transaction.Prize1.ToString("C2",numberFormat)</b></td>
                            <td style="text-align:right"><b>@transaction.Prize2.ToString("C2",numberFormat)</b></td>
                        </tr>
                        snoCountStart++;
                    }

                </tbody>
            </MudSimpleTable>
            <MudStack Row=true>
                <MudText>Total = @(Math.Ceiling(AddRate? AllItems.Sum(x=>x.sc_rate):AllItems.Sum(x=>x.Prize1+x.Prize2)).ToString("C0",numberFormat))</MudText>

                @*<MudIconButton Style="margin-left:auto;" Icon="@Icons.Material.Filled.Print" Color="@(Color.Warning)"></MudIconButton>*@

            </MudStack>
        }
        else
        {
            <MudText>No Entries</MudText>

        }
        @* @if (pdf is not null && pdf.Length > 0)
            {
                <iframe src=@("data:application/pdf;base64,"+Convert.ToBase64String(pdf))>
                </iframe>
            }*@
        @if (showrep)
        {
            <MudRadioGroup @bind-SelectedOption="@Serial">
                @if (disabled)
                {
                <MudText>Downloading report please wait...</MudText>
                }
            @if (!string.IsNullOrWhiteSpace(status))
                {
                <MudText>@status</MudText>
                }
            <MudStack AlignItems="@AlignItems.Center" Row="true">
                <div style="margin-left:auto;margin-right:auto">
                    <MudRadio Disabled="@disabled" Option="true" UnCheckedColor="Color.Surface" Color="Color.Warning">Serial</MudRadio>
                    <MudRadio Disabled="@disabled" Option="false" UnCheckedColor="Color.Surface" Color="Color.Warning">Un-Serial</MudRadio>
                </div>
            </MudStack>

        </MudRadioGroup>
        }
    </DialogContent>

    <DialogActions>
        @if (showrep)
        {
            <MudButton Disabled="@disabled" Color="Color.Success" OnClick="Submit" Style="margin-left:auto;margin-right:auto" Variant="Variant.Filled" StartIcon="@Icons.Custom.FileFormats.FilePdf">PDF Download</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [Inject]
    public IBlazorDownloadFileService BlazorDownloadFileService { get; set; }
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [CascadingParameter]
    RepeatDataReturnWA repeatData { get; set; }
    [Parameter]
    public IEnumerable<Transaction> AllItems { get; set; }
    [Parameter]
    public int InvNo { get; set; }
    [Parameter]
    public string Code { get; set; }
    [Parameter]
    public string Ref { get; set; }
    [Parameter]
    public bool AddRate { get; set; }
    [Parameter]
    public bool pr { get; set; }
    [Parameter]
    public bool Printable { get; set; }
    [Parameter]
    public InvoiceViewItem Inv { get; set; }
    [Parameter]
    public string RepType { get; set; }
    [Parameter]
    public bool showrep { get; set; }

    int snoCountStart = 1;
    public bool Serial { get; set; }
    public bool disabled { get; set; }
    public string status = "";
    private CultureInfo Curr = new CultureInfo("hi-IN");
    private NumberFormatInfo numberFormat { get; set; }
    //private byte[]? pdf = Array.Empty<byte>();
    protected override void OnInitialized()
    {
        numberFormat = Curr.NumberFormat;
        numberFormat.CurrencySymbol = "";
    }
    async void Submit()
    {
        status = "";
        disabled = true;
        FileReturnModel file = null;
        if (string.Equals(RepType, "per", StringComparison.CurrentCultureIgnoreCase))
        {
            file = await Api.GetSchemePacketInvoiceReport(Inv, Serial);
        }
        if (string.Equals(RepType, "mix", StringComparison.CurrentCultureIgnoreCase))
        {
            var inp = new Inventory()
                {
                    vid = Inv.Category,
                    Vno = Inv.InvNo,
                    lk = Inv.Printable,
                    lk2 = Inv.Printable,
                    Ref = Inv.Reference,
                    dmode = (int)Inv.LD,
                    propKey = Inv.MKey,
                };
            file = await Api.GetMixInvoiceSerialReport(inp, Serial);
        }
        if (string.Equals(RepType, "sch", StringComparison.CurrentCultureIgnoreCase))
        {
            var inp = new Inventory()
                {
                    vid = Inv.Category,
                    Vno = Inv.InvNo,
                    lk = Inv.Printable,
                    lk2 = Inv.Printable,
                    Ref = Inv.Reference,
                    dmode = (int)Inv.LD,
                    propKey = Inv.MKey,
                };
            file = await Api.GetMixSchemeInvoiceReport(inp, Serial);
        }
        if (file is not null)
        {
            if (file.File is null && file.FileName.Contains("error", StringComparison.CurrentCultureIgnoreCase))
            {
                status = file.FileName;
                disabled = false;
            }
            else
            {
                //pdf = file.File;
                //await BlazorDownloadFileService.DownloadFileAsync(file.FileName??"", file.File??Array.Empty<byte>());
                await Js.SaveAs(file.FileName, file.File);
                disabled = false;
                await InvokeAsync(StateHasChanged);
                MudDialog.Close(DialogResult.Ok(""));
            }
        }
        else
        {
            disabled = false;
            MudDialog.Close(DialogResult.Cancel());
        }

    }
    void Cancel() => MudDialog.Cancel();
}

