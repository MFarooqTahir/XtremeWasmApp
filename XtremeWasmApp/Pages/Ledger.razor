@page "/Ledger"
@inject WebApiService Api
@inject IJSRuntime Js
@inject IDialogService DialogService

<AuthorizeView>
    <Authorized>

        <div align-center style="max-width:450px;margin: auto;text-align:center" class="mt-3 pt-0">
            <MudPaper Elevation="2" Class="py-3 px-4">
                <h3>Account Statement</h3>
                <MudGrid Spacing="0" Justify="Justify.Center">
                    <MudItem xs="12">
                        <MudDatePicker PickerVariant="PickerVariant.Dialog" HelperText="From date" Disabled="@loading" Culture="System.Globalization.CultureInfo.InvariantCulture" DateFormat="dd-MMM-yyyy" TitleDateFormat="dd-MMM-yyyy" MaxDate="@DateTime.Now" @bind-Date="From">

                        </MudDatePicker>
                    </MudItem>
                    <MudItem xs="12">
                        <MudDatePicker PickerVariant="PickerVariant.Dialog" HelperText="To date" Disabled="@loading" Culture="System.Globalization.CultureInfo.InvariantCulture" DateFormat="dd-MMM-yyyy" TitleDateFormat="dd-MMM-yyyy" MaxDate="@DateTime.Now" @bind-Date="To">

                        </MudDatePicker>
                    </MudItem>
                    <MudItem xs="12">
                        <MudButton Disabled="@loading" Color="Color.Success" Class="mx-auto mt-4" OnClick="Download" Variant="Variant.Filled" StartIcon="@Icons.Custom.FileFormats.FilePdf">PDF Download</MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </div>
    </Authorized>
</AuthorizeView>
@code {
    private bool loading = false;
    private DateTime? _To = DateTime.Now;

    public DateTime? To
    {
        get { return _To; }
        set 
        {
            if (value <From)
            {
                _To = From;
                return;
            }
            _To = value; 
        }
    }
    private DateTime? _From = DateTime.Now;

    public DateTime? From
    {
        get { return _From; }
        set 
        { 
            if(value>To)
            {
                _From = To;
                return;
            }
            _From = value; 
        }
    }
    
    private async Task Download(MouseEventArgs args)
    {
        loading = true;
        var file = await Api.GetLedgerReport(From ??= DateTime.Now, To ??= DateTime.Now).ConfigureAwait(false);
        if (file is null || string.Equals(file.FileName, "No Entries",StringComparison.OrdinalIgnoreCase))
        {
            var options = new DialogOptions { CloseOnEscapeKey = true,CloseButton=true, MaxWidth=MaxWidth.Medium };
            await DialogService.ShowMessageBox("Error", "No Entries",options:options);
        }
        else if (file?.FileName?.Contains("error", StringComparison.CurrentCultureIgnoreCase) == false && file.File is not null)
        {

            await Js.SaveAs(file.FileName, file?.File);
        }
        loading = false;
    }
}
