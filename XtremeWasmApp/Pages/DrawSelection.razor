@page "/DrawSelection"
@using XtremeModels
@inject IJSRuntime JsRuntime
@inject IWebApiService ApiService
<PageTitle>Draw Selection</PageTitle>
<AuthorizeView>

    <Authorized>
        <MudText Typo="Typo.h4">Draw Selection</MudText>
        @if (ErrorsList?.Any() == true)
        {
            foreach (var item in ErrorsList)
            {
                <MudText Color="@Color.Error">@item</MudText>
            }
        }

        @if (schedules is null)
        {
            <MudText Typo="Typo.h5">Loading....</MudText>
        }
        else
        {
            if (schedules.Any())
            {
                <MudSimpleTable Striped="true" Hover="true" FixedHeader="true" Style="overflow-x: auto;">
                    <thead>
                        <tr>
                            <th></th>
                            <th style="text-align:center;font-size:large;"><b>Draw</b></th>
                            <th style="text-align:center;font-size:large;"><b>Date</b></th>
                            <th style="text-align:center;font-size:large;"><b>City</b></th>
                             @if(windowWidth>500){
                            <th style="text-align:center;font-size:large;"><b>Category</b></th>
                             }                            
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int count = 0;
                        }
                        @foreach (var row in schedules)
                        {
                            int currCount = count;
                            <tr @onclick="@(()=>onRowSelection(currCount))">
                                
                                <td style="text-align:center;max-width:30px;"><MudIcon Icon="@(row.Uac?Icons.Material.Filled.Edit:Icons.Material.Filled.EditOff)" Color="@(row.Uac?Color.Success:Color.Error)" Title="Pencil" /></td>
                                
                                <td style="text-align:center;min-width:105px;">@(row.DId+" - "+ row.BId)</td>
                                <td style="text-align:center;max-width:90px;">@row.Date.ToString("dd/MM/yyyy")</td>
                                <td style="text-align:center;font-size:large;min-width:100px;">@row.City</td>
                                @if(windowWidth>500){
                                <td style="text-align:center;font-size:large;">@row.Cat</td>
                                }
                            </tr>
                            count++;
                        }
                    </tbody>
                </MudSimpleTable>
            }
            else
            {
                <MudText Typo="Typo.h5">No draws</MudText>
            }
        }
    </Authorized>
</AuthorizeView>
@code {
    [Parameter]
    public bool OnlyActive{ get; set; }
    public IList<string> ErrorsList;
    IList<Schedule> schedules;

    private IJSObjectReference jsModule;

    public int windowHeight, windowWidth;

    public class WindowDimensions
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }
    protected override async Task OnInitializedAsync()
    {
        schedules = await ApiService.GetAllSch();
        if (schedules is null)
        {
            bool GetAll = OnlyActive || !await ApiService.IsDrawSelected();
            
            schedules = await ApiService.GetScheduleList(GetAll);
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Dimentions.js");
        }
        if (jsModule is not null)
        {
            var (prevHeight, prevWidth) = (windowHeight, windowWidth);
            var dimension = await jsModule.InvokeAsync<WindowDimensions>("getWindowSize");
            windowHeight = dimension.Height;
            windowWidth = dimension.Width;
            if((prevHeight, prevWidth) != (windowHeight, windowWidth))
            {
                StateHasChanged();
            }
        }
    }
    private async Task onRowSelection(int rowIndex)
    {
        var currSel = schedules[rowIndex];
        if (currSel.Uac)
        {
            var res = await ApiService.ChangeSchedule(currSel);
            if (!res)
            {
                ErrorsList = new List<string>() { "Either the draw is closed, or there was an error" };
                StateHasChanged();
            }
        }
        else
        {
            ErrorsList = new List<string>() { "Either the draw is closed, or there was an error" };

            StateHasChanged();
        }
    }
}
