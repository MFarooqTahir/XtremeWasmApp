@page "/View"
@using XtremeModels
@inject WebApiService Api
<AuthorizeView>
    <Authorized>
        <div align-center style="max-width:650px;
  margin: auto;">

            <MudStack>
                @if (InvList is null)
                {
                    <MudText Align="Align.Center">Loading...</MudText>
                }
                else if (InvList.Any())
                {
                    <MudPaper Style="background-color:transparent;padding-right:5px;padding-left:5px; padding-bottom:5px; margin-top:10px;" Outlined="true">
                       
        <div class="d-flex">
            <MudButton Class="mx-auto my-2" Color="Color.Surface" Variant="Variant.Filled" OnClick="@ChangeFilter">@CurrText</MudButton>
            </div>
                        @{
                            var dict = new Dictionary<int, string>
                            {
                                {0,"Limit"},
                                {1,"Demand"}
                            };
                        }
                        <MudSimpleTable Striped="true" Dense="true" Hover="true" Bordered="true" FixedHeader="true" Style="height:450px;margin-top:5px;" Class="rounded-0">
                            <thead>
                                <tr>
                                    <th style="background-color: #ffe4b5;color:black;"><b>L/D</b></th>
                                    <th style="background-color: #ffe4b5;color:black;"><b>Inv#</b></th>
                                    <th style="background-color: #ffe4b5;color:black;"><b>Cat</b></th>
                                    <th style="background-color: #ffe4b5;color:black;"><b>Reference</b></th>
                                    <th style="background-color: #ffe4b5;color:black;text-align:center"><b>Lock</b></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var invoice in InvListFiltered)
                                {
                                    <tr>
                                        <td><b>@(dict[(int)invoice.LD])</b></td>
                                        <td><b>@invoice.InvNo.ToString("D5")</b></td>
                                        <td><b>@invoice.CatValue</b></td>
                                        <td><b>@invoice.Reference</b></td>
                        <td style="display:flex"><MudIcon Class="mx-auto" Icon="@(Icons.Material.Filled.Lock)" Size="Size.Medium" Color="@(invoice.Printable?Color.Error:Color.Transparent)"></MudIcon></td>
                                        
                                    </tr>
                                }

                            </tbody>
                        </MudSimpleTable>

                    </MudPaper>
                }
                else
                {
                    <MudText Align="Align.Center">No Invoices</MudText>
                }
            </MudStack>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    IList<InvoiceViewItem> InvList { get; set; }
    IList<InvoiceViewItem> InvListFiltered { get; set; }
    string CurrText => ShowPurchase?"Purchase Invoices":"Sale Invoices";
    bool ShowPurchase = false;
    string[] SaleFilters = new[] { "1SL", "1SM", "1PS" };
    protected async override Task OnInitializedAsync()
    {
        InvList = await Api.GetInvoiceList();
        InvListFiltered = InvList.Where(x=>SaleFilters.Contains(x.Category)).ToList();
    }
    private void ChangeFilter(MouseEventArgs args)
    {
        ShowPurchase = !ShowPurchase;
        if(ShowPurchase)
        {
            InvListFiltered = InvList.Where(x=>!SaleFilters.Contains(x.Category)).ToList();
        }
        else{
            InvListFiltered = InvList.Where(x=>SaleFilters.Contains(x.Category)).ToList();

        }
    }
}
