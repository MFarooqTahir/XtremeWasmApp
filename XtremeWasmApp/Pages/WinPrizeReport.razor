@page "/Win"
@inject WebApiService Api
@inject IJSRuntime Js

<AuthorizeView>
    <Authorized>
        <h3 style="text-align:center;">Win Prize</h3>
        <div align-center style="max-width:725px;margin: auto;">
            <MudButton Disabled="@(IsLoading || report is null || report?.File?.Length==0)" Color="Color.Success" OnClick="DownloadReport" Variant="Variant.Filled" StartIcon="@Icons.Custom.FileFormats.FilePdf">PDF Download</MudButton>
            <br />
            @if (report?.File?.Length > 0)
            {
                string pd="data:application/pdf;base64,"+Convert.ToBase64String(report?.File??Array.Empty<byte>());
                <object style="height:700px;width:100%;margin-top:25px;" data=@pd>
                </object>
            }
            else
            {
                if (IsLoading)
                {
                    <MudText Typo="Typo.h4">Loading</MudText>

                }
                else if (!Initale)
                {
                    <MudText Typo="Typo.h4">No Results</MudText>

                }
            }
        </div>
    </Authorized>
</AuthorizeView>
@code {
    bool IsLoading = false;
    bool Initale = true;
    FileReturnModel report = null;
    protected override async Task OnInitializedAsync()
    {
        Initale = false;
        IsLoading = true;
        try
        {
            report = await Api?.GetRoundWinReport();
            if (report?.File is null ||report.File.Length==0)
            {
                report = null;
            }
        }
        finally
        {
            IsLoading = false;
        }
    }
    private async Task DownloadReport(MouseEventArgs args)
    {
        IsLoading = true;
        try
        {
            if (report is not null)
            {
                await Js.SaveAs(report?.FileName??"", report?.File??Array.Empty<byte>());
            }
        }
        finally
        {
            IsLoading = false;
        }
    }
}
